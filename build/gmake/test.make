# GNU Make project makefile autogenerated by Premake

ifndef config
  config=debug
endif

ifndef verbose
  SILENT = @
endif

.PHONY: clean prebuild prelink

ARCHBITS = -m64

ifeq ($(config),debug)
  ifeq ($(origin CC), default)
    CC = clang
  endif
  ifeq ($(origin CXX), default)
    CXX = clang++
  endif
  ifeq ($(origin AR), default)
    AR = ar
  endif
  TARGETDIR = ../../bin/Debug
  TARGET = $(TARGETDIR)/test
  OBJDIR = obj/Debug/test
  DEFINES += -DDEBUG
  INCLUDES += -I../.. -I../../test -I../../wren-main/src/include
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) $(ARCHBITS) -g -std=c++14
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) $(ARCHBITS) -g -std=c++14
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += ../../lib/Debug/libwrenpp.a -lwren
  LDDEPS += ../../lib/Debug/libwrenpp.a
  ALL_LDFLAGS += $(LDFLAGS) -L../../wren-main/lib $(ARCHBITS)
  LINKCMD = $(CXX) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
  define PREBUILDCMDS
	@echo Running prebuild commands
	mkdir -p ../../bin/Debug
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),release)
  ifeq ($(origin CC), default)
    CC = clang
  endif
  ifeq ($(origin CXX), default)
    CXX = clang++
  endif
  ifeq ($(origin AR), default)
    AR = ar
  endif
  TARGETDIR = ../../bin/Release
  TARGET = $(TARGETDIR)/test
  OBJDIR = obj/Release/test
  DEFINES += -DNDEBUG
  INCLUDES += -I../.. -I../../test -I../../wren-main/src/include
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) $(ARCHBITS) -O2 -std=c++14
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) $(ARCHBITS) -O2 -std=c++14
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += ../../lib/Release/libwrenpp.a -lwren
  LDDEPS += ../../lib/Release/libwrenpp.a
  ALL_LDFLAGS += $(LDFLAGS) -L../../wren-main/lib $(ARCHBITS)
  LINKCMD = $(CXX) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
  define PREBUILDCMDS
	@echo Running prebuild commands
	mkdir -p ../../bin/Release
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),test)
  ifeq ($(origin CC), default)
    CC = clang
  endif
  ifeq ($(origin CXX), default)
    CXX = clang++
  endif
  ifeq ($(origin AR), default)
    AR = ar
  endif
  TARGETDIR = ../../bin/Test
  TARGET = $(TARGETDIR)/test
  OBJDIR = obj/Test/test
  DEFINES +=
  INCLUDES += -I../.. -I../../test -I../../wren-main/src/include
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) $(ARCHBITS) -std=c++14
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) $(ARCHBITS) -std=c++14
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += ../../lib/Test/libwrenpp.a -lwren
  LDDEPS += ../../lib/Test/libwrenpp.a
  ALL_LDFLAGS += $(LDFLAGS) -L../../wren-main/lib $(ARCHBITS)
  LINKCMD = $(CXX) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
  define PREBUILDCMDS
	@echo Running prebuild commands
	mkdir -p ../../bin/Test
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
  endef
all: prebuild prelink $(TARGET)
	@:

endif

OBJECTS := \
	$(OBJDIR)/Wren++.o \
	$(OBJDIR)/Test.o \

RESOURCES := \

CUSTOMFILES := \

ifeq ($(config),debug)
  CUSTOMFILES += \
	../../bin/Debug/assert.wren \
	../../bin/Debug/test.wren \
	../../bin/Debug/test_method.wren \
	../../bin/Debug/test_properties.wren \
	../../bin/Debug/test_vector.wren \
	../../bin/Debug/transform.wren \
	../../bin/Debug/vector.wren \

endif

ifeq ($(config),release)
  CUSTOMFILES += \
	../../bin/Release/assert.wren \
	../../bin/Release/test.wren \
	../../bin/Release/test_method.wren \
	../../bin/Release/test_properties.wren \
	../../bin/Release/test_vector.wren \
	../../bin/Release/transform.wren \
	../../bin/Release/vector.wren \

endif

ifeq ($(config),test)
  CUSTOMFILES += \
	../../bin/Test/assert.wren \
	../../bin/Test/test.wren \
	../../bin/Test/test_method.wren \
	../../bin/Test/test_properties.wren \
	../../bin/Test/test_vector.wren \
	../../bin/Test/transform.wren \
	../../bin/Test/vector.wren \

endif

SHELLTYPE := msdos
ifeq (,$(ComSpec)$(COMSPEC))
  SHELLTYPE := posix
endif
ifeq (/bin,$(findstring /bin,$(SHELL)))
  SHELLTYPE := posix
endif

$(TARGET): $(GCH) ${CUSTOMFILES} $(OBJECTS) $(LDDEPS) $(RESOURCES)
	@echo Linking test
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(TARGETDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(TARGETDIR))
endif
	$(SILENT) $(LINKCMD)
	$(POSTBUILDCMDS)

clean:
	@echo Cleaning test
ifeq (posix,$(SHELLTYPE))
	$(SILENT) rm -f  $(TARGET)
	$(SILENT) rm -rf $(OBJDIR)
else
	$(SILENT) if exist $(subst /,\\,$(TARGET)) del $(subst /,\\,$(TARGET))
	$(SILENT) if exist $(subst /,\\,$(OBJDIR)) rmdir /s /q $(subst /,\\,$(OBJDIR))
endif

prebuild:
	$(PREBUILDCMDS)

prelink:
	$(PRELINKCMDS)

ifneq (,$(PCH))
$(OBJECTS): $(GCH) $(PCH)
$(GCH): $(PCH)
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) -x c++-header $(ALL_CXXFLAGS) -o "$@" -MF "$(@:%.gch=%.d)" -c "$<"
endif

$(OBJDIR)/Wren++.o: ../../Wren++.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Test.o: ../../test/Test.cpp
	@echo $(notdir $<)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
ifeq ($(config),debug)
../../bin/Debug/assert.wren: ../../test/assert.wren
	@echo "Building ../../test/assert.wren"
	$(SILENT) cp -rf ../../test/assert.wren ../../bin/Debug
endif
ifeq ($(config),release)
../../bin/Release/assert.wren: ../../test/assert.wren
	@echo "Building ../../test/assert.wren"
	$(SILENT) cp -rf ../../test/assert.wren ../../bin/Release
endif
ifeq ($(config),test)
../../bin/Test/assert.wren: ../../test/assert.wren
	@echo "Building ../../test/assert.wren"
	$(SILENT) cp -rf ../../test/assert.wren ../../bin/Test
endif
ifeq ($(config),debug)
../../bin/Debug/test.wren: ../../test/test.wren
	@echo "Building ../../test/test.wren"
	$(SILENT) cp -rf ../../test/test.wren ../../bin/Debug
endif
ifeq ($(config),release)
../../bin/Release/test.wren: ../../test/test.wren
	@echo "Building ../../test/test.wren"
	$(SILENT) cp -rf ../../test/test.wren ../../bin/Release
endif
ifeq ($(config),test)
../../bin/Test/test.wren: ../../test/test.wren
	@echo "Building ../../test/test.wren"
	$(SILENT) cp -rf ../../test/test.wren ../../bin/Test
endif
ifeq ($(config),debug)
../../bin/Debug/test_method.wren: ../../test/test_method.wren
	@echo "Building ../../test/test_method.wren"
	$(SILENT) cp -rf ../../test/test_method.wren ../../bin/Debug
endif
ifeq ($(config),release)
../../bin/Release/test_method.wren: ../../test/test_method.wren
	@echo "Building ../../test/test_method.wren"
	$(SILENT) cp -rf ../../test/test_method.wren ../../bin/Release
endif
ifeq ($(config),test)
../../bin/Test/test_method.wren: ../../test/test_method.wren
	@echo "Building ../../test/test_method.wren"
	$(SILENT) cp -rf ../../test/test_method.wren ../../bin/Test
endif
ifeq ($(config),debug)
../../bin/Debug/test_properties.wren: ../../test/test_properties.wren
	@echo "Building ../../test/test_properties.wren"
	$(SILENT) cp -rf ../../test/test_properties.wren ../../bin/Debug
endif
ifeq ($(config),release)
../../bin/Release/test_properties.wren: ../../test/test_properties.wren
	@echo "Building ../../test/test_properties.wren"
	$(SILENT) cp -rf ../../test/test_properties.wren ../../bin/Release
endif
ifeq ($(config),test)
../../bin/Test/test_properties.wren: ../../test/test_properties.wren
	@echo "Building ../../test/test_properties.wren"
	$(SILENT) cp -rf ../../test/test_properties.wren ../../bin/Test
endif
ifeq ($(config),debug)
../../bin/Debug/test_vector.wren: ../../test/test_vector.wren
	@echo "Building ../../test/test_vector.wren"
	$(SILENT) cp -rf ../../test/test_vector.wren ../../bin/Debug
endif
ifeq ($(config),release)
../../bin/Release/test_vector.wren: ../../test/test_vector.wren
	@echo "Building ../../test/test_vector.wren"
	$(SILENT) cp -rf ../../test/test_vector.wren ../../bin/Release
endif
ifeq ($(config),test)
../../bin/Test/test_vector.wren: ../../test/test_vector.wren
	@echo "Building ../../test/test_vector.wren"
	$(SILENT) cp -rf ../../test/test_vector.wren ../../bin/Test
endif
ifeq ($(config),debug)
../../bin/Debug/transform.wren: ../../test/transform.wren
	@echo "Building ../../test/transform.wren"
	$(SILENT) cp -rf ../../test/transform.wren ../../bin/Debug
endif
ifeq ($(config),release)
../../bin/Release/transform.wren: ../../test/transform.wren
	@echo "Building ../../test/transform.wren"
	$(SILENT) cp -rf ../../test/transform.wren ../../bin/Release
endif
ifeq ($(config),test)
../../bin/Test/transform.wren: ../../test/transform.wren
	@echo "Building ../../test/transform.wren"
	$(SILENT) cp -rf ../../test/transform.wren ../../bin/Test
endif
ifeq ($(config),debug)
../../bin/Debug/vector.wren: ../../test/vector.wren
	@echo "Building ../../test/vector.wren"
	$(SILENT) cp -rf ../../test/vector.wren ../../bin/Debug
endif
ifeq ($(config),release)
../../bin/Release/vector.wren: ../../test/vector.wren
	@echo "Building ../../test/vector.wren"
	$(SILENT) cp -rf ../../test/vector.wren ../../bin/Release
endif
ifeq ($(config),test)
../../bin/Test/vector.wren: ../../test/vector.wren
	@echo "Building ../../test/vector.wren"
	$(SILENT) cp -rf ../../test/vector.wren ../../bin/Test
endif

-include $(OBJECTS:%.o=%.d)
ifneq (,$(PCH))
  -include $(OBJDIR)/$(notdir $(PCH)).d
endif
